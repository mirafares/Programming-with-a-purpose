Tasks:
1. Discrete distribution. Write a program DiscreteDistribution.java that takes an integer command-line argument m, followed by a sequence of positive integer command-line arguments a1,a2,…,an
, and prints m random indices (separated by whitespace), choosing each index i
 with probability proportional to ai.

Define the cumulative sums Si=a1+a2+…+ai
, with S0=0
.
Pick a random integer r
 uniformly between 0 and Sn−1
.
Find the unique index i
 between 1 and n
 such that Si−1≤r<Si
.
Geometrically, this subdivides the interval [0,Sn)
 into n subintervals [Si−1,Si)
, with the length of subinterval i proportional to ai
. For example, if the discrete distribution is defined by

(a1,a2,a3,a4,a5,a6)=(10,10,10,10,10,50)
,
then the cumulative sums are
(S1,S2,S3,S4,S5,S6)=(10,20,30,40,50,100)
and the following diagram illustrates the 6 subintervals:
sampling from a discrete distribution

In probability theory, this is known as sampling from a discrete distribution.


2. Thue–Morse weave. Write a program ThueMorse.java that takes an integer command-line argument n and prints an n-by-n pattern like the ones below. Include two space characters between each + and - character.

The Thue–Morse sequence is an infinite sequence of 0s and 1s that is constructed by starting with 0 and successively appending the bitwise negation (interchange 0s and 1s) of the existing sequence. Here are the first few steps of this construction:
0010110011010010110100110010110
To visualize the Thue–Morse sequence, create an n-by-n pattern by printing a + (plus sign) in row i
 and column j
 if bits i
 and j
 in the sequence are equal, and a - (minus sign) if they are different.
Thue–Morse weave
Note: you may assume that n is a positive integer (but it need not be a power of 2).

The Thue–Morse sequence has many fascinating properties and arises in graphic design and in music composition.

3. Birthday problem. Suppose that people enter a room one at a time. How people must enter until two share a birthday? Counterintuitively, after 23 people enter the room, there is approximately a 50–50 chance that two share a birthday. This phenomenon is known as the birthday problem or birthday paradox.
Write a program Birthday.java that takes two integer command-line arguments n and trials and performs the following experiment, trials times:

Choose a birthday for the next person, uniformly at random between 0 and n−1.
Have that person enter the room.
If that person shares a birthday with someone else in the room, stop; otherwise repeat.
In each experiment, count the number of people that enter the room. Print a table that summarizes the results (the count i, the number of times that exactly i people enter the room, and the fraction of times that i or fewer people enter the room) for each possible value of i from 1 until the fraction reaches (or exceeds) 50%.
sampling from a discrete distribution

The birthday problem arises in many computer science applications, including hashing, cryptographic attacks, and testing random number generators.

4. Minesweeper. Minesweeper is a 1960s era video game played on an m-by-n grid of cells. The goal is to deduce which cells contain hidden mines using clues about the number of mines in neighboring cells. Write a program Minesweeper.java that takes three integer command-line arguments m, n, and k and prints an m-by-n grid of cells with k mines, using asterisks for mines and integers for the neighboring mine counts (with two space characters between each cell). To do so,
Generate an m-by-n grid of cells, with exactly k of the mn cells containing mines, uniformly at random.
For each cell not containing a mine, count the number of neighboring mines (above, below, left, right, or diagonal).
